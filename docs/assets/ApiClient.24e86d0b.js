var d=Object.defineProperty;var c=Object.getOwnPropertySymbols;var m=Object.prototype.hasOwnProperty,f=Object.prototype.propertyIsEnumerable;var o=(t,e,s)=>e in t?d(t,e,{enumerable:!0,configurable:!0,writable:!0,value:s}):t[e]=s,l=(t,e)=>{for(var s in e||(e={}))m.call(e,s)&&o(t,s,e[s]);if(c)for(var s of c(e))f.call(e,s)&&o(t,s,e[s]);return t};var A=(t,e,s)=>{if(!e.has(t))throw TypeError("Cannot "+s)};var r=(t,e,s)=>(A(t,e,"read from private field"),s?s.call(t):e.get(t)),h=(t,e,s)=>{if(e.has(t))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(t):e.set(t,s)};import{b as a}from"./index.c49a531a.js";var n;class u{constructor(){h(this,n,"apps")}async fetchApps(){var s;const e=(s=a.get(r(this,n)))!=null?s:[];return Promise.resolve(e)}async addApp(e){const s=await this.fetchApps(),i=l({id:s.length+1,createdAt:new Date().getTime(),balance:0},e);return a.set(r(this,n),[...s,i]),Promise.resolve(i)}async removeApp(e){const s=await this.fetchApps(),i=s.findIndex(p=>p.id===e);return i===-1?Promise.reject():(a.set(r(this,n),[...s.slice(0,i),...s.slice(i+1)]),Promise.resolve(e))}async editApp(e){const s=await this.fetchApps(),i=s.findIndex(p=>p.id===e.id);return i===-1?Promise.reject():(a.set(r(this,n),[...s.slice(0,i),e,...s.slice(i+1)]),Promise.resolve(e))}}n=new WeakMap;var x=new u;export{x as a};
